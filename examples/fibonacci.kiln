(load "library/utilities")
(load "library/replication")
(load "library/simple-components")
{include-component "library/ordering"}
{include-component "library/math"}

;; Sends the given process `count` times.
(trigger* {repeat (tup ?process ?count)}
  {<= (tup ?index 0
           null
           (new next
             ?process
             {- (tup ?count 1 {next})}
             (trigger {next ?next} {repeat (tup ?process ?next)})))})

(trigger* {fibonacci (tup ?index {?rc})}
  {<= (tup ?index 1
           {rc ?index}
           (new (previous f)
             {- (tup ?index 1 {previous})}
             {- (tup ?index 2 {previous})}
             {repeat (tup (trigger {previous ?new-index}
                            {fibonacci (tup ?new-index {f})})
                          2)}
             (trigger (par {f ?fib1} {f ?fib2})
               {+ (tup ?fib1 ?fib2 {rc})})))})

#|
;; alternative implementation
;; use sandbox and trigger* instead of repeat and trigger
(trigger* {fibonacci (tup ?index {?rc})}
  {<= (tup ?index 1
           {rc ?index}
           {sandbox (tup (new (previous f)
                           {- (tup ?index 1 {previous})}
                           {- (tup ?index 2 {previous})}
                           (trigger* {previous ?new-index}
                             {fibonacci (tup ?new-index {f})})
                           (trigger (par {f ?fib1} {f ?fib2})
                             {+ (tup ?fib1 ?fib2 {rc})}))
                         {rc})})})
|#
