;; this just requires the jk pattern language

(def (sandbox temp-process final-response-channel)
  `(new (sandbox response)
        (par (trigger {response ?result down}
                      ;; NOTE: we could replace ?completed-process with _ if we used a
                      ;;       different calculus
                      (par (trigger [sandbox ?completed-process] null)
                           {,final-response-channel ?result}))
             [sandbox (par (trigger {,final-response-channel ?result down}
                                    {response ?result})
                           [sandbox ,temp-process])])))
