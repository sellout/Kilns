(load "library/replication")

;;; This file implements a very basic component model that allows for sending
;;; either qualified or unqualified messages to the component. It is not a rich
;;; model, but it illustrates the simplicity with which components can be
;;; realized.
;;;
;;; In this model, a component is a file that contains (among other things)
;;; triggers at the top level that match on {?x ?y up}. These can be equated to
;;; public methods or exported functions.

;;; A message sent over `component-out` will be passed out of the component back
;;; to the parent kell. This is useful for sending responses.

;;; You need to use `component-local` if you want to send a message to a trigger
;;; that's part of your component's public interface (since they are all
;;; listening for up-messages, you need to get the message out of the kell
;;; first).

;;; NOTE: if you wrap a call in `component-local`, you shouldn't wrap its
;;;       responses in `component-out`, since the local call you're making will
;;;       do that itself.

;; FIXME: outer-* should be restricted, but it doesn't work with our current
;;        implementation of definitions
;;(new (outer-replace-component outer-remove-component)

     ;; `include-component` will allow you to send messages that match those
     ;;  triggers directly. EG, if there is a trigger in the component that
     ;;  matches "{echo ?string up}", then {echo "test"} will cause a reaction
     ;;  with it. This gives you direct access, but you need to be careful that
     ;;  the "exported" triggers don't conflict with your own triggers. This is
     ;;  similar to :USEing the component in a Common Lisp DEFPACKAGE.
     (par (def (include-component filename)
            `(new component (par (trigger* {component-out ?out down} ?out)
                                 (trigger* {component-local ?local down} ?local)
                                 [component (load ,filename)])))

          ;; `load-component` gives you better isolation, but requires that you
          ;; "qualify" the message with the name of the kell you pass in. Using
          ;;  the same example as above, if you name the component "io", then
          ;;  you need to send the message {io {echo "test"}} to cause a
          ;;  reaction in the component. With this version, you only need to
          ;;  ensure that {io ...} doesn't conflict with your own triggers.
          ;;  Nothing the component writer does can interfere with your other
          ;;  messages and triggers.
          (def (load-component filename prefix)
            (cl:let ((kellname (cl:gensym (cl:symbol-name prefix))))
              `(new ,kellname
                    (par (trigger* {component-out ?out down} ?out)
                         [,kellname (par (trigger* {,prefix ?message up}
                                                   ?message)
                                         (trigger* {component-local ?local down}
                                                   ?local)
                                         (trigger* {component-out ?out down}
                                                   {component-out ?out})
                                         [,kellname (load ,filename)]
                                         (trigger {replace-component (par {prefix {,prefix}}
                                                                          {filename ?file})
                                                                     up}
                                                  {outer-replace-component
                                                   (par {filename ?file}
                                                        {prefix {,prefix}}
                                                        {component-name {,kellname}})})
                                         (trigger {remove-component {,prefix} up}
                                                  {outer-remove-component {,kellname}}))]))))

;;; If we fix how `load` works (get it to execute at the right time), we can
;;; implement this as processes rather than definitions.

          #|
          (trigger* {include-component ?filename}
          (new component (par (trigger* {component-out ?out down} ?out)
          (trigger* {component-local ?local down} ?local)
          [component (load #.?filename)])))
          (trigger* {load-component (par {filename ?file} {prefix {?pre}})}
          (new component
          (par (trigger* {component-out ?out down} ?out)
          [component (par (trigger* {?prefix ?message up}
          ?message)
          (trigger* {component-local ?local down}
          ?local)
          (trigger* {component-out ?out down}
          {component-out ?out})
          [component (load #.?filename)]
          (trigger {replace-component (par {prefix {pre}}
          {filename ?file})
          up}
          {outer-replace-component
          (par {filename ?file}
          {prefix {pre}}
          {component-name {component}})})
          (trigger {remove-component {pre} up}
          {outer-remove-component {component}}))]))
          |#
          (trigger* {outer-replace-component (par {filename ?file}
                                                  {prefix {?pre}}
                                                  {component-name {?component}})
                                             down}
                    (trigger [component ?x]
                             ;; FIXME: this canâ€™t work until `load` is fixed
                             {load-component ?file ?pre}))
          (trigger* {outer-remove-component {?component} down}
                    (trigger [component ?x] null)))
;;)

;;; With this approach, you can do
#|
          {load-component (par {prefix {xml}} {filename "xml-component"})}
          {replace-component (par {prefix {xml}} {filename "new-xml-component"})}
          {remove-component {xml}}
          |#

;;; TODO: We should also make it possible to store state outside of the main
;;;       component kell. This should be used to hold parameters that have been
;;;       overridden by the user, so that replace-component doesn't trample them
