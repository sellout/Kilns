(load "library/replication")
(load "library/utilities")

(load "library/simple-components")
{include-component "library/identity"}

(load "library/interface")

{publish {if}}
{publish {items-from-list}}
{publish {from-cl-list}}

;;; This is a bit hacky for now, to just fill in the patterns I tend to use

;; A simple lisp-boolean tester
(trigger* {if (tup ?test ?true ?false)}
  {= (tup (lisp cl:nil) (lisp (cl:quote test)) {component-out false} {component-out true})})

;; Sends each item in the list over `cons`, then performs `done`
;; (trigger* (up {items-from-list (tup ?list {?cons} ?done)})
;;   {component-out (lisp (cl:apply #'parallel-composition
;;                                  (cl:mapcar (cl:lambda (item)
;;                                               (substitute-variables (item)
;;                                                 {cons item}))
;;                                             (cl:quote list))))
;;                  done})

;; FIXME: this is a Kilnsier version of items-from-list, but we evaluate lists
;;        too often, so each iteration tries to evaluate, and so we end up with
;;        undefined var errors

;; sends each item in a list over `cons`, then performs `done`
(trigger* (up {items-from-list (tup ?list {?cons} ?done)})
  {if (tup list
           (cont {cons (lisp (cl:car list))}
                 {items-from-list (tup (lisp (cl:cdr list))
                                       {cons}
                                       done)})
           done)})

(trigger* (up {from-cl-list (tup ?list {?rc})})
  {if (tup list
           (new tail
             (trigger {tail ?x}
               {rc {cons {car (lisp (cl:car (cl:quote) list))}
                         {cdr x}}})
             {from-cl-list (tup (lisp (cl:cdr (cl:quote list))) {tail})})
           {rc {nil}})})
