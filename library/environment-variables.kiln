(load "library/replication")
(load "library/utilities")
(load "library/simple-components")
(include-component "library/identity")

;;; This should give the illusion that these variables work the same as "normal"
;;; variables, IE
;;; 
;;; (trigger {environment {PATH ?value} up} ...) should work as getenv("PATH")

(new (get-environment-variable
      set-environment-variable
      unset-environment-variable)
     (par
      ;; initialize the environment
      (new (var done)
           (par {items-from-list
                 (list (lisp (cl:let (symbols)
                               (cl:maphash (cl:lambda (key value)
                                             (cl:declare (cl:ignore value))
                                             (cl:push key symbols))
                                           (iolib.os::environment-variables
                                            (iolib.os:environment)))
                               symbols))
                       {var} {done})}
                (trigger* {var ?name}
                          {get-environment-variable
                           (lisp (message (cl:intern #.?name)))})))


      ;; set an environment variable
      (trigger* {environment {?variable-name ?value} down}
                {= (list ?value null
                         {unset-environment-variable {variable-name}
                                                     (trigger {environment {variable-name _}}
                                                              null)}
                         {set-environment-variable {variable-name ?value}
                                                   (trigger {environment {variable-name _}}
                                                            null)})})
      
      ;; private API that directly accesses the environment

      (include-component "library/lisp-ffi")

      (trigger* {get-environment-variable {?name}}
                (new env
                     (par {env (lisp (iolib.os:environment-variable
                                      (cl:string '#.?name)))}
                          (trigger {env ?value}
                                   {if (list ?value
                                             {environment
                                              {name ?value}
                                              {get-environment-variable {name}}}
                                             null)}))))

      (trigger* {set-environment-variable {?name ?value}}
                (lisp (cl:setf (iolib.os:environment-variable
                                (cl:string '#.?name))
                               #.?value)
                      null))

      (trigger* {unset-environment-variable {?name}}
                (lisp (iolib.os:makunbound-environment-variable (string #.?name))
                      null))
))
