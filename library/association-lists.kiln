;;; requires the FraKtal calculus
(load "library/utilities")
(load "library/replication")
(load "library/sandbox")

(trigger* {new-list {?response-channel}}
  (new (l-op g s r l cons nil)
    (List {l-op} {g} {s} {r} {l} {cons} {nil})
    {l {nil}}
    {response-channel (tup {l-op} {g} {s} {r})}))

(define (List {?l-op} {?g} {?s} {?r} {?l} {?cons} {?nil})
  (trigger* {l-op (tup ?p {?k})}
    (Lop p {k} {g} {s} {r} {l} {cons} {nil})))

(define (Lop ?p {?k} {?g} {?s} {?r} {?l} {?cons} {?nil})
  (new k*
    (trigger {l ?x}
      {sandbox (tup (par p
                         {l x}
                         (create-list-operations {g} {s} {r} {l} {cons} {nil})
                         (trigger (par {k ?z} {l ?x*})
                           {k* (tup z x*)}))
                     {k*})}
      (trigger {k* (tup ?z ?x*)}
        {k z}
        {l x*}))))

(define (create-list-operations {?g} {?s} {?r} {?l} {?cons} {?nil})
  (Set {s} {l} {cons})
  (Get {g} {l} {cons} {nil})
  (Rem {r} {l} {cons} {nil}))

(define (Set {?s} {?l} {?cons})
  (trigger* (par {s (tup {?n} ?y ?z)} {l ?x})
    (par {l {cons (tup {n y} x)}}
         z)))

(define (Get {?g} {?l} {?cons} {?nil})
  (trigger* (par {g (tup {?n} {?k} ?x)} {l ?xl})
    (par (Get-i {n} {k} x xl {cons} {nil})
         {l xl})))

(define (Get-i {?n} {?k} ?x ?x-l {?cons} {?nil})
  (new g-i
    (trigger* {g-i {cons (tup {n ?y} ?z)}}      {k y})
    (trigger* {g-i {cons (tup {(!= n) ?y} ?z)}} {g-i z})
    (trigger* {g-i {nil}}                       x)
    {g-i x-l}))

(define (Rem {?r} {?l} {?cons} {?nil})
  (trigger* (par {r (tup {?n} {?k} ?x)} {l ?x-l})
    (par (Rem-i {n} {k} x x-l {l} {cons} {nil})
         {l x-l})))

(define (Rem-i {?n} {?k} ?x ?x-l {?l} {?cons} {?nil})
  (new (r-i rev)
    (trigger* {r-i (tup {cons (tup {n ?y} ?z)} ?z*)}
      (par {k y} {rev (tup z z*)}))
    (trigger* {r-i (tup {cons (tup {(!= n ?m) ?y} ?z)} ?z*)}
      {r-i (tup z {cons (tup {m y} z*)})})
    (trigger* {r-i (tup {nil} ?z*)}
      (par x {rev (tup {nil} z*)}))
    (trigger* {rev (tup ?z {cons (tup x ?z*)})}
      {rev (tup {cons (tup x z)} z*)})
    (trigger* {rev (tup ?z {nil})}
      {l z})
    {r-i (tup x-l {nil})}))
