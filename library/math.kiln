(load "library/replication")
(load "library/utilities")
(load "library/simple-components")
{include-component "library/identity"}
{include-component "library/ordering"}

;; primitives

(trigger* {+ (list ?augend ?addend {?rc}) up}
          (lisp (cl:let ((sum (cl:+ #.?augend #.?addend)))
                  {component-out {#.?rc sum}})))
(trigger* {- (list ?minuend ?subtrahend {?rc}) up}
          (lisp (cl:let ((difference (cl:- #.?minuend #.?subtrahend)))
                  {component-out {#.?rc difference}})))
(trigger* {* (list ?multiplier ?multiplicand {?rc}) up}
          (lisp (cl:let ((product (cl:* #.?multiplier #.?multiplicand)))
                  {component-out {#.?rc product}})))
(trigger* {/ (list ?dividend ?divisor {?rc}) up}
          (lisp (cl:let ((quotient (cl:/ #.?dividend #.?divisor)))
                  {component-out {#.?rc quotient}})))
(trigger* {remainder (list ?number ?divisor {?rc}) up}
          (lisp (cl:let ((remainder (cl:rem #.?number #.?divisor)))
                  {component-out {#.?rc remainder}})))

;; derived

(trigger* {zerop (list ?number ?true ?false) up}
          {= (list ?number 0 {component-out ?true} {component-out ?false})})

(trigger* {plusp (list ?number ?true ?false) up}
          {< (list 0 ?number {component-out ?true} {component-out ?false})})

(trigger* {minusp (list ?number ?true ?false) up}
          {< (list ?number 0 {component-out ?true} {component-out ?false})})


(trigger* {modulus (list ?number ?divisor {?rc}) up}
          (new rem
               (par {component-local {remainder (list ?number ?divisor {rem})}}
                    (trigger {rem ?remain up}
                             {component-local {zerop (list ?remain
                                                           {rc ?remain}
                                                           {minusp (list ?divisor
                                                                         {plusp (list ?number
                                                                                      {+ (list ?remain ?divisor {rc})}
                                                                                      {rc ?remain})}
                                                                         {minusp (list ?number
                                                                                       {+ (list ?remain ?divisor {rc})}
                                                                                       {rc ?remain})})})}}))))

(trigger* {evenp (list ?integer ?true ?false) up}
          (new bin
               (par {component-local {modulus (list ?integer 2 {bin})}}
                    (trigger {bin ?binary up}
                             {= (list ?binary 2
                                      {component-out ?true}
                                      {component-out ?false})}))))

#|
(trigger* {abs (list ?number {?rc})}
          {complexp (list ?number
                          (new (part pow sum)
                               (par {realpart (list ?number {part})}
                                    {imagpart (list ?number {part})}
                                    ;; need to clean up
                                    (trigger* {part ?part}
                                              {expt (list ?part 2 {pow})})
                                    (trigger (par {pow ?a} {pow ?b})
                                             {+ (list ?a ?b {sum})})
                                    (trigger {sum ?sum}
                                             {sqrt (list ?sum {rc})})))
                          {minusp (list ?number
                                        {- (list ?number {rc})}
                                        {rc ?number})})})

(trigger* {conjugate (list ?complex {?rc})}
          (par {realpart (list ?complex {real})}
               {imagpart (list ?complex {imag})}
               (trigger {imag ?real} {- (list ?real {ima})})
               (trigger (par {real ?r} {ima ?i}) {complex (list ?r ?i {rc})})))

;;(trigger* {least-common-multiple (list ?a ?b {?rc})}

(trigger* {signum (list ?number {?rc})}
          {zerop (list ?number
                       {rc ?number}
                       (new ab
                            (par {abs (list ?number {ab})}
                                 (trigger {ab ?val} {/ ?number ?val}))))})

(trigger* {tan (list ?number {?rc})}
          (new (s c)
               (par {sin ?number {s}}
                    {cos ?number {c}}
                    (trigger (par {s ?s} {c ?c}) {/ (list ?s ?c {rc})}))))
|#
