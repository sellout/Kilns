(load "library/replication")
(load "library/utilities")

(def (Collector)
    (trigger* {collect (list {?a} {?k} ?p)}
              (trigger [a ?x]
                       (new (r b)
                            (par (F ?a ?k r)
                                 [b (trigger (par [a ?x]
                                                  {query (list {a} {k} {r})}
                                                  {r (list {a} {k} {?b})})
                                             {r (list {a} {k} {b})})])))))

(def (F a k r)
    (par (trigger {r (list {a} {k} {yes})} (trigger [b ?y] ?p))
         (trigger {r (list {a} {k} {no})}
                  (trigger [b ?y] (par {collect (list {a} {k})} [a ?x])))))

;;; Isn't this good enough?
(def (Collector)
    (trigger* {collect {?kell} down}
              (trigger [kell ?x] null)))

;;;       ⟦null⟧ = null
;;;  ⟦(new n P)⟧ = (new n ⟦P⟧)
;;;   ⟦(par P Q⟧ = (par ⟦P⟧ ⟦Q⟧)
;;;      ⟦(! P)⟧ = (new a (par {a} (trigger {a} (par ⟦P⟧ {a}))))
;;;      ⟦[a P]⟧ = (par [a (par (A a) [amb ⟦P⟧])] (AmbEnv))
;;;   ⟦(in a P)⟧ = {in (list a ⟦P⟧)} 
;;;  ⟦(out a P)⟧ = {out (list a ⟦P⟧)}
;;; ⟦(open a P)⟧ = {open (list a ⟦P⟧)}

(def (A a)
    `(new t
          (par {t}
               (S ,a t)
               (T ,a t)
               (F ,a t)
               (NQ ,a t))))

(def (S a t)
    `(par (trigger (par {t} {in (list ?b ?p) down})
                   (trigger [amb ?z]
                            (new k
                                 (par {collect (list {,a} {k} {to (list {,a} {in} ?m ?p ?z)})}
                                      (YQ ,a k)))))
          (trigger (par {t} {out (list ?b ?p) down})
                   (trigger [amb ?z]
                            (new k
                                 (par {collect (list {,a} {k} {up (list {,a} {out} ?m ?p ?z)})}
                                      (YQ ,a k)))))))



