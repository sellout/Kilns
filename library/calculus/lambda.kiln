(new (lam fun arg abs)
     ;;            ⟦x⟧ = x
     ;; ⟦(lambda x P)⟧ = {abs (trigger {lambda x} ⟦P⟧)}
     ;;        ⟦(P Q)⟧ = (new (fun arg) (par (App) [fun ⟦P⟧] {arg ⟦Q⟧}))
     (par (def (lambda (var) process)
              `{abs (trigger {lam (process-variable ',var)} ,process)})
          (def (apply fun arg)
              `(new (fun arg)
                    (par (App)
                         [fun ,fun]
                         {arg ,arg})))
          (def (App)
              ;; TODO: Technically this isn't valid FraKtal (kell patterns can
              ;;       only contain a variable, not a process), but our
              ;;       implementation accepts it, and my naive fix to make it
              ;;       valid broke it.
              `(trigger (par [fun {abs ?p}] {arg ?q})
                        (par ?p {lam ?q})))))
