#+xcvb (module (:depends-on ("package")))
(in-package :kell-calculus)

(defgeneric free-names (process)
  (:documentation "Process -> {Name}")
  (:method (process) ; catchall
    (declare (ignore process))
    '())
  (:method ((process null-process))
    '())
  (:method ((process symbol))
    ;; FIXME: we don't actually know whether a symbol is a free name or a free
    ;;        variable without the context that surrounds it.
    (list process))
  (:method ((process process-variable))
    '())
  (:method ((process restriction))
    (set-difference (free-names (abstraction process)) (names process)))
  (:method ((process kell))
    (reduce #'union
            (list (free-names (name process))
                  (free-names (state process))
                  (free-names (continuation process)))))
  (:method ((process message))
    (reduce #'union
            (list (free-names (name process))
                  (free-names (argument process))
                  (free-names (continuation process)))))
  (:method ((process parallel-composition))
    (reduce #'union (map-parallel-composition #'free-names process)))
  (:method ((process trigger))
    (union (free-names (pattern process))
           (set-difference (free-names (process process))
                           (bound-names (pattern process))))))

(defgeneric free-variables (process)
  (:documentation "Process -> {ProcessVariable}")
  (:method ((process null-process))
    (declare (ignore process))
    '())
  (:method (process)
    (declare (ignore process))
    '())
  (:method ((process symbol))
    ;; FIXME: we don't actually know whether a symbol is a free name or a free
    ;;        variable without the context that surrounds it.
    '())
  (:method ((process cons))
    (reduce #'union (mapcar #'free-variables process)))
  (:method ((process process-variable))
    (list process))
  (:method ((process restriction))
    (set-difference (free-variables (abstraction process)) (names process)))
  (:method ((process kell))
    (union (free-variables (state process))
           (free-variables (continuation process))))
  (:method ((process message))
    (union (free-variables (argument process))
           (free-variables (continuation process))))
  (:method ((process parallel-composition))
    (reduce #'union (map-parallel-composition #'free-variables process)))
  (:method ((process trigger))
    (set-difference (free-variables (process process))
                    (bound-variables (pattern process)))))
